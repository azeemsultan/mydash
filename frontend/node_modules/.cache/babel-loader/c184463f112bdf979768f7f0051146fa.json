{"ast":null,"code":"import { SP_LIST_REQUEST, SP_LIST_SUCCESS, SP_LIST_FAIL, SERVICE_DETAIL_REQUEST, SERVICE_DETAIL_SUCCESS, SERVICE_DETAIL_FAIL, PRODUCT_SAVE_SUCCESS, PRODUCT_SAVE_FAIL, PRODUCT_SAVE_REQUEST } from '../constants/serviceproviderconst';\nimport axios from 'axios';\nimport Axios from 'axios';\n\nconst listServiceproviders = () => async dispatch => {\n  try {\n    dispatch({\n      type: SP_LIST_REQUEST\n    });\n    const {\n      data\n    } = await axios.get(\"/api/serviceproviders\");\n    dispatch({\n      type: SP_LIST_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: SP_LIST_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst saveService = product => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: PRODUCT_SAVE_REQUEST,\n      payload: product\n    });\n    const {\n      userSignin: {\n        userInfo\n      }\n    } = getState();\n    const {\n      data\n    } = await Axios.post('/api/serviceproviders', product, {\n      header: {\n        'Authorization': 'Bearer' + userInfo.token\n      }\n    });\n    dispatch({\n      type: PRODUCT_SAVE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: PRODUCT_SAVE_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst detailsService = productId => async dispatch => {\n  try {\n    dispatch({\n      type: SERVICE_DETAIL_REQUEST,\n      payload: productId\n    });\n    const {\n      data\n    } = await axios.get(\"/api/serviceproviders/\" + productId);\n    dispatch({\n      type: SERVICE_DETAIL_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: SERVICE_DETAIL_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nexport { listServiceproviders, detailsService, saveService };","map":{"version":3,"sources":["C:/Users/RBTG/Desktop/mydash/frontend/src/actions/serviceprovideraction.js"],"names":["SP_LIST_REQUEST","SP_LIST_SUCCESS","SP_LIST_FAIL","SERVICE_DETAIL_REQUEST","SERVICE_DETAIL_SUCCESS","SERVICE_DETAIL_FAIL","PRODUCT_SAVE_SUCCESS","PRODUCT_SAVE_FAIL","PRODUCT_SAVE_REQUEST","axios","Axios","listServiceproviders","dispatch","type","data","get","payload","error","message","saveService","product","getState","userSignin","userInfo","post","header","token","detailsService","productId"],"mappings":"AAAA,SAAQA,eAAR,EAAwBC,eAAxB,EAAwCC,YAAxC,EAAsDC,sBAAtD,EAA8EC,sBAA9E,EAAsGC,mBAAtG,EAA2HC,oBAA3H,EAAiJC,iBAAjJ,EAAoKC,oBAApK,QAA+L,mCAA/L;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAGA,MAAMC,oBAAoB,GAAG,MAAM,MAAOC,QAAP,IAAoB;AAEnD,MAAG;AACHA,IAAAA,QAAQ,CAAE;AAACC,MAAAA,IAAI,EAAEb;AAAP,KAAF,CAAR;AACA,UAAM;AAACc,MAAAA;AAAD,QAAS,MAAML,KAAK,CAACM,GAAN,CAAU,uBAAV,CAArB;AACAH,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAAEZ,eAAP;AAAuBe,MAAAA,OAAO,EAAEF;AAAhC,KAAD,CAAR;AACH,GAJG,CAOA,OAAMG,KAAN,EAAY;AACRL,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAAEX,YAAP;AAAqBc,MAAAA,OAAO,EAAEC,KAAK,CAACC;AAApC,KAAD,CAAR;AAEH;AACJ,CAbD;;AAeA,MAAMC,WAAW,GAAIC,OAAD,IAAa,OAAOR,QAAP,EAAiBS,QAAjB,KAA6B;AAC1D,MAAG;AACCT,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAAEL,oBAAP;AAA6BQ,MAAAA,OAAO,EAAEI;AAAtC,KAAD,CAAR;AACA,UAAM;AAACE,MAAAA,UAAU,EAAE;AAACC,QAAAA;AAAD;AAAb,QAA2BF,QAAQ,EAAzC;AACA,UAAM;AAACP,MAAAA;AAAD,QAAS,MAAMJ,KAAK,CAACc,IAAN,CAAW,uBAAX,EAAoCJ,OAApC,EAA6C;AAACK,MAAAA,MAAM,EACrE;AACA,yBAAiB,WAAWF,QAAQ,CAACG;AADrC;AAD8D,KAA7C,CAArB;AAKJd,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAACP,oBAAN;AAA4BU,MAAAA,OAAO,EAAEF;AAArC,KAAD,CAAR;AACC,GATD,CAUA,OAAMG,KAAN,EAAY;AACRL,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAACN,iBAAN;AAAyBS,MAAAA,OAAO,EAAEC,KAAK,CAACC;AAAxC,KAAD,CAAR;AACH;AACJ,CAdD;;AAgBA,MAAMS,cAAc,GAAGC,SAAD,IAAc,MAAOhB,QAAP,IAAqB;AACrD,MAAG;AACCA,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAAEV,sBAAP;AAA+Ba,MAAAA,OAAO,EAAEY;AAAxC,KAAD,CAAR;AACA,UAAM;AAACd,MAAAA;AAAD,QAAS,MAAML,KAAK,CAACM,GAAN,CAAU,2BAA2Ba,SAArC,CAArB;AACAhB,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAAET,sBAAP;AAA+BY,MAAAA,OAAO,EAAEF;AAAxC,KAAD,CAAR;AACH,GAJD,CAKA,OAAMG,KAAN,EAAY;AACRL,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAAER,mBAAP;AAA4BW,MAAAA,OAAO,EAAEC,KAAK,CAACC;AAA3C,KAAD,CAAR;AACH;AACJ,CATD;;AAUI,SAAQP,oBAAR,EAA8BgB,cAA9B,EAA8CR,WAA9C","sourcesContent":["import {SP_LIST_REQUEST,SP_LIST_SUCCESS,SP_LIST_FAIL, SERVICE_DETAIL_REQUEST, SERVICE_DETAIL_SUCCESS, SERVICE_DETAIL_FAIL, PRODUCT_SAVE_SUCCESS, PRODUCT_SAVE_FAIL, PRODUCT_SAVE_REQUEST} from '../constants/serviceproviderconst';\r\nimport axios from 'axios';\r\nimport Axios from 'axios';\r\n\r\n\r\nconst listServiceproviders = () => async (dispatch) => {\r\n\r\n    try{\r\n    dispatch( {type: SP_LIST_REQUEST});\r\n    const {data} = await axios.get(\"/api/serviceproviders\");\r\n    dispatch({type: SP_LIST_SUCCESS,payload: data})\r\n}\r\n    \r\n\r\n    catch(error){\r\n        dispatch({type: SP_LIST_FAIL, payload: error.message});\r\n\r\n    }\r\n}\r\n\r\nconst saveService = (product) => async (dispatch, getState) =>{\r\n    try{\r\n        dispatch({type: PRODUCT_SAVE_REQUEST, payload: product});\r\n        const {userSignin: {userInfo}} = getState();\r\n        const {data} = await Axios.post('/api/serviceproviders', product, {header:\r\n            {\r\n            'Authorization': 'Bearer' + userInfo.token\r\n        }\r\n    });\r\n    dispatch({type:PRODUCT_SAVE_SUCCESS, payload: data});\r\n    }\r\n    catch(error){\r\n        dispatch({type:PRODUCT_SAVE_FAIL, payload: error.message});\r\n    }\r\n}\r\n\r\nconst detailsService= (productId)=> async (dispatch ) => {\r\n    try{\r\n        dispatch({type: SERVICE_DETAIL_REQUEST, payload: productId});\r\n        const {data} = await axios.get(\"/api/serviceproviders/\" + productId);\r\n        dispatch({type: SERVICE_DETAIL_SUCCESS, payload: data}); \r\n    }\r\n    catch(error){\r\n        dispatch({type: SERVICE_DETAIL_FAIL, payload: error.message});\r\n    }\r\n}\r\n    export {listServiceproviders, detailsService, saveService}"]},"metadata":{},"sourceType":"module"}