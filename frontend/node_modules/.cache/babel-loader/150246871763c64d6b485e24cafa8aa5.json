{"ast":null,"code":"import { SP_LIST_REQUEST, SP_LIST_SUCCESS, SP_LIST_FAIL, SERVICE_DETAIL_REQUEST, SERVICE_DETAIL_SUCCESS, SERVICE_DETAIL_FAIL } from '../constants/serviceproviderconst';\nimport axios from 'axios';\nimport Axios from 'axios';\n\nconst listServiceproviders = () => async dispatch => {\n  try {\n    dispatch({\n      type: SP_LIST_REQUEST\n    });\n    const {\n      data\n    } = await axios.get(\"/api/serviceproviders\");\n    dispatch({\n      type: SP_LIST_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: SP_LIST_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst saveService = serviceprovider = async dispatch => {\n  try {\n    dispatch({\n      type: PRODUCT_SAVE_REQUEST,\n      payload: serviceprovider\n    });\n    const {\n      data\n    } = await Axios.post('/api/serviceproviders', serviceprovider, {\n      header: {\n        'Authorization': 'Bearer' + userInfo.token\n      }\n    });\n    dispatch({\n      type: PRODUCT_SAVE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: PRODUCT_SAVE_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst detailsService = productId => async dispatch => {\n  try {\n    dispatch({\n      type: SERVICE_DETAIL_REQUEST,\n      payload: productId\n    });\n    const {\n      data\n    } = await axios.get(\"/api/serviceproviders/\" + productId);\n    dispatch({\n      type: SERVICE_DETAIL_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: SERVICE_DETAIL_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nexport { listServiceproviders, detailsService, saveService };","map":{"version":3,"sources":["C:/Users/RBTG/Desktop/mydash/frontend/src/actions/serviceprovideraction.js"],"names":["SP_LIST_REQUEST","SP_LIST_SUCCESS","SP_LIST_FAIL","SERVICE_DETAIL_REQUEST","SERVICE_DETAIL_SUCCESS","SERVICE_DETAIL_FAIL","axios","Axios","listServiceproviders","dispatch","type","data","get","payload","error","message","saveService","serviceprovider","PRODUCT_SAVE_REQUEST","post","header","userInfo","token","PRODUCT_SAVE_SUCCESS","PRODUCT_SAVE_FAIL","detailsService","productId"],"mappings":"AAAA,SAAQA,eAAR,EAAwBC,eAAxB,EAAwCC,YAAxC,EAAsDC,sBAAtD,EAA8EC,sBAA9E,EAAsGC,mBAAtG,QAAgI,mCAAhI;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAGA,MAAMC,oBAAoB,GAAG,MAAM,MAAOC,QAAP,IAAoB;AAEnD,MAAG;AACHA,IAAAA,QAAQ,CAAE;AAACC,MAAAA,IAAI,EAAEV;AAAP,KAAF,CAAR;AACA,UAAM;AAACW,MAAAA;AAAD,QAAS,MAAML,KAAK,CAACM,GAAN,CAAU,uBAAV,CAArB;AACAH,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAAET,eAAP;AAAuBY,MAAAA,OAAO,EAAEF;AAAhC,KAAD,CAAR;AACH,GAJG,CAOA,OAAMG,KAAN,EAAY;AACRL,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAAER,YAAP;AAAoBW,MAAAA,OAAO,EAAEC,KAAK,CAACC;AAAnC,KAAD,CAAR;AAEH;AACJ,CAbD;;AAeA,MAAMC,WAAW,GAAIC,eAAD,GAAoB,MAAMR,QAAN,IAAmB;AAEvD,MAAG;AACCA,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAAEQ,oBAAP;AAA6BL,MAAAA,OAAO,EAAEI;AAAtC,KAAD,CAAR;AACA,UAAM;AAACN,MAAAA;AAAD,QAAS,MAAMJ,KAAK,CAACY,IAAN,CAAW,uBAAX,EAAoCF,eAApC,EAAoD;AAACG,MAAAA,MAAM,EAAC;AAC7E,yBAAiB,WAAWC,QAAQ,CAACC;AADwC;AAAR,KAApD,CAArB;AAIJb,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAACa,oBAAN;AAA4BV,MAAAA,OAAO,EAAEF;AAArC,KAAD,CAAR;AACC,GAPD,CAQA,OAAMG,KAAN,EAAY;AACRL,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAACc,iBAAN;AAAyBX,MAAAA,OAAO,EAAEC,KAAK,CAACC;AAAxC,KAAD,CAAR;AACH;AACJ,CAbD;;AAeA,MAAMU,cAAc,GAAGC,SAAD,IAAc,MAAOjB,QAAP,IAAqB;AACrD,MAAG;AACCA,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAAEP,sBAAP;AAA+BU,MAAAA,OAAO,EAAEa;AAAxC,KAAD,CAAR;AACA,UAAM;AAACf,MAAAA;AAAD,QAAS,MAAML,KAAK,CAACM,GAAN,CAAU,2BAA2Bc,SAArC,CAArB;AACAjB,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAAEN,sBAAP;AAA+BS,MAAAA,OAAO,EAAEF;AAAxC,KAAD,CAAR;AACH,GAJD,CAKA,OAAMG,KAAN,EAAY;AACRL,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAAEL,mBAAP;AAA4BQ,MAAAA,OAAO,EAAEC,KAAK,CAACC;AAA3C,KAAD,CAAR;AACH;AACJ,CATD;;AAUI,SAAQP,oBAAR,EAA8BiB,cAA9B,EAA8CT,WAA9C","sourcesContent":["import {SP_LIST_REQUEST,SP_LIST_SUCCESS,SP_LIST_FAIL, SERVICE_DETAIL_REQUEST, SERVICE_DETAIL_SUCCESS, SERVICE_DETAIL_FAIL} from '../constants/serviceproviderconst';\r\nimport axios from 'axios';\r\nimport Axios from 'axios';\r\n\r\n\r\nconst listServiceproviders = () => async (dispatch) => {\r\n\r\n    try{\r\n    dispatch( {type: SP_LIST_REQUEST});\r\n    const {data} = await axios.get(\"/api/serviceproviders\");\r\n    dispatch({type: SP_LIST_SUCCESS,payload: data})\r\n}\r\n    \r\n\r\n    catch(error){\r\n        dispatch({type: SP_LIST_FAIL,payload: error.message});\r\n\r\n    }\r\n}\r\n\r\nconst saveService = (serviceprovider) = async(dispatch) => {\r\n\r\n    try{\r\n        dispatch({type: PRODUCT_SAVE_REQUEST, payload: serviceprovider});\r\n        const {data} = await Axios.post('/api/serviceproviders', serviceprovider,{header:{\r\n            'Authorization': 'Bearer' + userInfo.token\r\n        }\r\n    });\r\n    dispatch({type:PRODUCT_SAVE_SUCCESS, payload: data});\r\n    }\r\n    catch(error){\r\n        dispatch({type:PRODUCT_SAVE_FAIL, payload: error.message});\r\n    }\r\n}\r\n\r\nconst detailsService= (productId)=> async (dispatch ) => {\r\n    try{\r\n        dispatch({type: SERVICE_DETAIL_REQUEST, payload: productId});\r\n        const {data} = await axios.get(\"/api/serviceproviders/\" + productId);\r\n        dispatch({type: SERVICE_DETAIL_SUCCESS, payload: data}); \r\n    }\r\n    catch(error){\r\n        dispatch({type: SERVICE_DETAIL_FAIL, payload: error.message});\r\n    }\r\n}\r\n    export {listServiceproviders, detailsService, saveService}"]},"metadata":{},"sourceType":"module"}