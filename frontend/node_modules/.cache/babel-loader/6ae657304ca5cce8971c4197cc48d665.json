{"ast":null,"code":"import { SP_LIST_REQUEST, SP_LIST_SUCCESS, SP_LIST_FAIL, SERVICE_DETAIL_REQUEST, SERVICE_DETAIL_SUCCESS, SERVICE_DETAIL_FAIL, PRODUCT_SAVE_SUCCESS, PRODUCT_SAVE_FAIL, PRODUCT_SAVE_REQUEST, SERVICE_DELETE_SUCCESS, SERVICE_DELETE_FAIL, SERVICE_DELETE_REQUEST } from '../constants/serviceproviderconst';\nimport axios from 'axios';\nimport Axios from 'axios';\nimport { serviceproviderListReducer } from '../reducers/serviceproviderReducer';\n\nconst listServiceproviders = () => async dispatch => {\n  try {\n    dispatch({\n      type: SP_LIST_REQUEST\n    });\n    const {\n      data\n    } = await axios.get(\"/api/serviceproviders\");\n    dispatch({\n      type: SP_LIST_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: SP_LIST_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst saveService = serviceprovider => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: PRODUCT_SAVE_REQUEST,\n      payload: serviceprovider\n    });\n    const {\n      userSignin: {\n        userInfo\n      }\n    } = getState();\n\n    if (!serviceprovider._id) {\n      const {\n        data\n      } = await Axios.post('/api/serviceproviders', serviceprovider, {\n        header: {\n          'Authorization': 'Bearer' + userInfo.token\n        }\n      });\n      dispatch({\n        type: PRODUCT_SAVE_SUCCESS,\n        payload: data\n      });\n    } else {\n      const {\n        data\n      } = await Axios.put('/api/serviceproviders/' + serviceprovider._id, serviceprovider, {\n        header: {\n          'Authorization': 'Bearer' + userInfo.token\n        }\n      });\n      dispatch({\n        type: PRODUCT_SAVE_SUCCESS,\n        payload: data\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: PRODUCT_SAVE_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst deleteService = serviceId => async (dispatch, getState) => {\n  try {\n    const {\n      userSignin: {\n        userInfo\n      }\n    } = getState();\n    dispatch({\n      type: SERVICE_DELETE_REQUEST,\n      payload: serviceId\n    });\n    const {\n      data\n    } = await axios.delete(\"/api/serviceproviders/\" + serviceId, {\n      header: {\n        Authorization: 'Bearer' + userInfo.token\n      }\n    });\n    dispatch({\n      type: SERVICE_DELETE_SUCCESS,\n      payload: data,\n      success: true\n    });\n  } catch (error) {\n    dispatch({\n      type: SERVICE_DELETE_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst detailsService = serviceId => async dispatch => {\n  try {\n    dispatch({\n      type: SERVICE_DETAIL_REQUEST,\n      payload: serviceId\n    });\n    const {\n      data\n    } = await axios.get(\"/api/serviceproviders/\" + serviceId);\n    dispatch({\n      type: SERVICE_DETAIL_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: SERVICE_DETAIL_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nexport { listServiceproviders, detailsService, saveService, deleteService };","map":{"version":3,"sources":["C:/Users/RBTG/Desktop/mydash/frontend/src/actions/serviceprovideraction.js"],"names":["SP_LIST_REQUEST","SP_LIST_SUCCESS","SP_LIST_FAIL","SERVICE_DETAIL_REQUEST","SERVICE_DETAIL_SUCCESS","SERVICE_DETAIL_FAIL","PRODUCT_SAVE_SUCCESS","PRODUCT_SAVE_FAIL","PRODUCT_SAVE_REQUEST","SERVICE_DELETE_SUCCESS","SERVICE_DELETE_FAIL","SERVICE_DELETE_REQUEST","axios","Axios","serviceproviderListReducer","listServiceproviders","dispatch","type","data","get","payload","error","message","saveService","serviceprovider","getState","userSignin","userInfo","_id","post","header","token","put","deleteService","serviceId","delete","Authorization","success","detailsService"],"mappings":"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","sourcesContent":["import {SP_LIST_REQUEST,SP_LIST_SUCCESS,SP_LIST_FAIL, SERVICE_DETAIL_REQUEST, SERVICE_DETAIL_SUCCESS, SERVICE_DETAIL_FAIL, PRODUCT_SAVE_SUCCESS, PRODUCT_SAVE_FAIL, PRODUCT_SAVE_REQUEST, SERVICE_DELETE_SUCCESS, SERVICE_DELETE_FAIL, SERVICE_DELETE_REQUEST} from '../constants/serviceproviderconst';\r\nimport axios from 'axios';\r\nimport Axios from 'axios';\r\nimport { serviceproviderListReducer } from '../reducers/serviceproviderReducer';\r\n\r\n\r\nconst listServiceproviders = () => async (dispatch) => {\r\n\r\n    try{\r\n    dispatch( {type: SP_LIST_REQUEST});\r\n    const {data} = await axios.get(\"/api/serviceproviders\");\r\n    dispatch({type: SP_LIST_SUCCESS,payload: data})\r\n}\r\n    \r\n\r\n    catch(error){\r\n        dispatch({type: SP_LIST_FAIL, payload: error.message});\r\n\r\n    }\r\n}\r\n\r\nconst saveService = (serviceprovider) => async (dispatch, getState) =>{\r\n    try{\r\n        dispatch({type: PRODUCT_SAVE_REQUEST, payload: serviceprovider});\r\n        const {userSignin: {userInfo}} = getState();\r\n        if(!serviceprovider._id)\r\n        {\r\n            const { data } = await Axios.post('/api/serviceproviders', serviceprovider, {header:\r\n                {\r\n                'Authorization': 'Bearer' + userInfo.token\r\n            }\r\n        });\r\n        dispatch({type:PRODUCT_SAVE_SUCCESS, payload: data});\r\n    } \r\n        else {\r\n            const {data} = await Axios.put('/api/serviceproviders/'+serviceprovider._id, serviceprovider, {header:\r\n                {\r\n                'Authorization': 'Bearer' + userInfo.token\r\n            }\r\n        });\r\n        dispatch({type:PRODUCT_SAVE_SUCCESS, payload: data});\r\n        }\r\n     \r\n \r\n\r\n    }\r\n    catch(error){\r\n        dispatch({type:PRODUCT_SAVE_FAIL, payload: error.message});\r\n    }\r\n}\r\n\r\nconst deleteService= (serviceId)=> async (dispatch , getState) => {\r\n    try{\r\n        const { userSignin: {userInfo} }= getState();\r\n        dispatch({type: SERVICE_DELETE_REQUEST, payload: serviceId});\r\n\r\n        const {data} = await axios.delete(\"/api/serviceproviders/\" + serviceId, {\r\n            header:{\r\n                Authorization: 'Bearer' + userInfo.token\r\n            }\r\n        });\r\n        dispatch({type: SERVICE_DELETE_SUCCESS, payload: data, success: true}); \r\n    }\r\n    catch(error){\r\n        dispatch({type: SERVICE_DELETE_FAIL, payload: error.message});\r\n    }\r\n}\r\n\r\n\r\nconst detailsService= (serviceId)=> async (dispatch ) => {\r\n    try{\r\n        dispatch({type: SERVICE_DETAIL_REQUEST, payload: serviceId});\r\n\r\n        const {data} = await axios.get(\"/api/serviceproviders/\" + serviceId);\r\n        dispatch({type: SERVICE_DETAIL_SUCCESS, payload: data}); \r\n    }\r\n    catch(error){\r\n        dispatch({type: SERVICE_DETAIL_FAIL, payload: error.message});\r\n    }\r\n}\r\n    export {listServiceproviders, detailsService, saveService, deleteService}"]},"metadata":{},"sourceType":"module"}